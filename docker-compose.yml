version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:moviepass@db:5432/movie_recommendation_db
      - REDIS_URL=redis://redis:6379/0
      - TMDB_API_KEY=${TMDB_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 movie_backend.wsgi:application"

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: movie_db
      POSTGRES_USER: movie_user
      POSTGRES_PASSWORD: movie_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_backup:/backup
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/staticfiles
      - ./ssl:/etc/ssl/certs
    depends_on:
      - web

  celery:
    build: .
    command: celery -A movie_backend worker -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:moviepass@db:5432/movie_recommendation_db
      - REDIS_URL=redis://redis:6379/0
      - TMDB_API_KEY=${TMDB_API_KEY}
    depends_on:
      - db
      - redis

  celery-beat:
    build: .
    command: celery -A movie_backend beat -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:moviepass@db:5432/movie_recommendation_db
      - REDIS_URL=redis://redis:6379/0
      - TMDB_API_KEY=${TMDB_API_KEY}
    depends_on:
      - db
      - redis

volumes:
  postgres_data:
  redis_data:
